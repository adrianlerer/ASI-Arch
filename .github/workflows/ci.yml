name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check "src/**/*.ts" "meta/**/*.ts"

      - name: TypeScript type checking
        run: npx tsc --noEmit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: asi-arch-meta-coverage
          fail_ci_if_error: false

  build:
    name: Build & Compile
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Generate documentation
        run: npm run docs

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            docs/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run integration tests
        run: npm run test:integration
        env:
          MONGODB_URI: mongodb://root:test@localhost:27017/asi-arch-test?authSource=admin
          NODE_ENV: test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  evolutionary-validation:
    name: Evolutionary Loop Validation
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run evolutionary loop validation
        run: node scripts/validate-evolution.js
        env:
          VALIDATION_MODE: ci
          MAX_GENERATIONS: 5
          POPULATION_SIZE: 10

      - name: Upload evolution metrics
        uses: actions/upload-artifact@v3
        with:
          name: evolution-metrics
          path: evolution-results.json
          retention-days: 30

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run performance benchmarks
        run: npm run benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 30

      - name: Comment benchmark results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('benchmark-results.json')) {
              const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
              const comment = `## 📊 Performance Benchmark Results
              
              | Metric | Value | Status |
              |--------|-------|--------|
              | Avg Response Time | ${results.avgResponseTime}ms | ${results.avgResponseTime < 100 ? '✅' : '⚠️'} |
              | Memory Usage | ${results.memoryUsage}MB | ${results.memoryUsage < 512 ? '✅' : '⚠️'} |
              | Evolution Speed | ${results.evolutionSpeed} gen/min | ${results.evolutionSpeed > 1 ? '✅' : '⚠️'} |
              | Agent Throughput | ${results.agentThroughput} ops/sec | ${results.agentThroughput > 10 ? '✅' : '⚠️'} |
              
              ${results.regressions.length > 0 ? '⚠️ Performance regressions detected!' : '✅ No performance regressions'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  deployment-test:
    name: Deployment Validation
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test Docker build
        run: |
          if [ -f Dockerfile ]; then
            docker build -t asi-arch-meta:test .
            docker run --rm asi-arch-meta:test npm test
          fi

      - name: Validate Kubernetes manifests
        run: |
          if [ -d k8s/ ]; then
            kubectl --dry-run=client apply -f k8s/
          fi

  release-check:
    name: Release Readiness
    runs-on: ubuntu-latest
    needs: [deployment-test, performance-benchmark, evolutionary-validation]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check release readiness
        run: |
          echo "🔍 Checking release readiness..."
          
          # Check if CHANGELOG.md exists and is updated
          if [ ! -f CHANGELOG.md ]; then
            echo "❌ CHANGELOG.md not found"
            exit 1
          fi
          
          # Check if version in package.json follows semver
          VERSION=$(node -p "require('./package.json').version")
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          
          # Check if all required files exist
          REQUIRED_FILES="README.md LICENSE META_AGREEMENTS.md CONTRIBUTING.md SECURITY.md"
          for file in $REQUIRED_FILES; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file missing: $file"
              exit 1
            fi
          done
          
          echo "✅ Release readiness check passed"

      - name: Generate release notes
        if: success()
        run: |
          echo "📝 Generating release notes..."
          # This would integrate with conventional-changelog or similar
          echo "Release notes generated successfully" > release-notes.md

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            dist/
            docs/
            release-notes.md
          retention-days: 90