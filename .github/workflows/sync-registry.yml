name: Sync Agent Registry

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      force_full_sync:
        description: 'Force full registry synchronization'
        required: false
        default: 'false'
        type: boolean
      target_repos:
        description: 'Comma-separated list of specific repos to sync (optional)'
        required: false
        type: string

env:
  NODE_VERSION: '18'

jobs:
  sync-registry:
    name: Synchronize Agent Registry
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout meta repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Checkout registry repository
        uses: actions/checkout@v4
        with:
          repository: adrianlerer/asi-arch-agent-registry
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ./registry
          fetch-depth: 1

      - name: Configure git for registry updates
        run: |
          cd registry
          git config user.name "ASI-Arch Bot"
          git config user.email "asi-arch-bot@users.noreply.github.com"

      - name: Run registry synchronization
        run: npm run sync:registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FORCE_FULL_SYNC: ${{ github.event.inputs.force_full_sync || 'false' }}
          TARGET_REPOS: ${{ github.event.inputs.target_repos || '' }}
          REGISTRY_PATH: ./registry
          MAX_CONCURRENT_SCANS: 5
          RATE_LIMIT_DELAY: 1000

      - name: Validate updated registry
        run: |
          cd registry
          npm install
          npm run validate

      - name: Generate registry index
        run: |
          cd registry
          npm run build:index

      - name: Check for registry changes
        id: check_changes
        run: |
          cd registry
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in registry"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in registry"
            git diff --name-only
          fi

      - name: Commit and push registry changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          cd registry
          git add .
          git commit -m "chore: automated registry sync - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push origin main

      - name: Create registry release
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read current registry version
            const registryPackage = JSON.parse(fs.readFileSync('./registry/package.json', 'utf8'));
            const currentVersion = registryPackage.version;
            
            // Calculate new version (increment patch)
            const versionParts = currentVersion.split('.');
            versionParts[2] = (parseInt(versionParts[2]) + 1).toString();
            const newVersion = versionParts.join('.');
            
            // Update package.json version
            registryPackage.version = newVersion;
            fs.writeFileSync('./registry/package.json', JSON.stringify(registryPackage, null, 2));
            
            // Commit version update
            const { execSync } = require('child_process');
            execSync('cd registry && git add package.json && git commit -m "chore: bump version to ' + newVersion + '"', { stdio: 'inherit' });
            execSync('cd registry && git push origin main', { stdio: 'inherit' });
            
            // Create GitHub release
            const releaseResponse = await github.rest.repos.createRelease({
              owner: 'adrianlerer',
              repo: 'asi-arch-agent-registry',
              tag_name: `registry-v${newVersion}`,
              name: `Agent Registry v${newVersion}`,
              body: `# ASI-Arch Agent Registry v${newVersion}
              
              Automated registry update with latest agent discoveries and validations.
              
              ## ðŸ“Š Registry Statistics
              - **Total Agents**: ${await getAgentCount()}
              - **Active Coordinators**: ${await getCoordinatorCount()}
              - **Sector Packs**: ${await getSectorPackCount()}
              - **Last Updated**: ${new Date().toISOString()}
              
              ## ðŸ”„ Changes
              - Automated agent discovery and validation
              - Updated compatibility checks
              - Refreshed metadata and metrics
              - License compliance verification
              
              ## ðŸ“¦ Assets
              - \`registry-index.json\`: Complete registry index
              - \`agents/\`: Individual agent configurations
              - \`coordinators/\`: Coordinator specifications
              - \`sectors/\`: Sector-specific packs
              
              ---
              *This release was generated automatically by the ASI-Arch meta-agent system.*`,
              draft: false,
              prerelease: false
            });
            
            console.log(`Created release: ${releaseResponse.data.html_url}`);
            
            // Helper functions to count registry items
            async function getAgentCount() {
              try {
                const agentsDir = './registry/registry/agents';
                if (fs.existsSync(agentsDir)) {
                  return fs.readdirSync(agentsDir).filter(f => f.endsWith('.yaml')).length;
                }
                return 0;
              } catch { return 0; }
            }
            
            async function getCoordinatorCount() {
              try {
                const coordDir = './registry/registry/coordinators';
                if (fs.existsSync(coordDir)) {
                  return fs.readdirSync(coordDir).filter(f => f.endsWith('.yaml')).length;
                }
                return 0;
              } catch { return 0; }
            }
            
            async function getSectorPackCount() {
              try {
                const sectorsDir = './registry/registry/sectors';
                if (fs.existsSync(sectorsDir)) {
                  return fs.readdirSync(sectorsDir).filter(f => f.endsWith('.yaml')).length;
                }
                return 0;
              } catch { return 0; }
            }

      - name: Update meta repository index
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          # Copy updated index back to meta repository
          cp ./registry/dist/index.json ./meta/registry-index.json
          
          # Update meta repository
          git add meta/registry-index.json
          git commit -m "chore: update registry index from sync - $(date -u '+%Y-%m-%d %H:%M:%S UTC')" || echo "No changes to commit"
          git push origin main || echo "No changes to push"

      - name: Generate sync report
        run: |
          cat > sync-report.md << EOF
          # Registry Sync Report
          
          **Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Trigger**: ${{ github.event_name }}
          **Changes Detected**: ${{ steps.check_changes.outputs.changes }}
          
          ## Configuration
          - **Force Full Sync**: ${{ github.event.inputs.force_full_sync || 'false' }}
          - **Target Repos**: ${{ github.event.inputs.target_repos || 'all' }}
          - **Max Concurrent Scans**: 5
          - **Rate Limit Delay**: 1000ms
          
          ## Statistics
          EOF
          
          if [ -f ./registry/dist/index.json ]; then
            echo "- **Total Registry Entries**: $(cat ./registry/dist/index.json | jq '. | length')" >> sync-report.md
          fi
          
          echo "" >> sync-report.md
          echo "## Processing Log" >> sync-report.md
          echo "\`\`\`" >> sync-report.md
          tail -50 sync.log >> sync-report.md 2>/dev/null || echo "No detailed log available" >> sync-report.md
          echo "\`\`\`" >> sync-report.md

      - name: Upload sync artifacts
        uses: actions/upload-artifact@v3
        with:
          name: registry-sync-artifacts
          path: |
            sync-report.md
            sync.log
            ./registry/dist/index.json
          retention-days: 30

      - name: Send notification on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Create an issue for failed sync
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸš¨ Registry Sync Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `# Registry Synchronization Failure
              
              The automated registry sync failed on ${new Date().toISOString()}.
              
              ## Details
              - **Workflow Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
              - **Trigger**: ${context.eventName}
              - **Branch**: ${context.ref}
              
              ## Next Steps
              1. Review the workflow logs for specific error details
              2. Check for API rate limits or authentication issues
              3. Verify target repository accessibility
              4. Consider running manual sync if needed
              
              ## Manual Sync Command
              \`\`\`bash
              npm run sync:registry -- --force
              \`\`\`
              
              This issue will be automatically closed when the next sync succeeds.`,
              labels: ['bug', 'automation', 'registry-sync']
            });

      - name: Close previous failure issues on success
        if: success() && steps.check_changes.outputs.changes == 'true'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Find and close any open registry sync failure issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'registry-sync',
              state: 'open'
            });
            
            for (const issue of issues.data) {
              if (issue.title.includes('Registry Sync Failed')) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `âœ… Registry sync has been restored successfully. This issue is now resolved.
                  
                  **Resolution Time**: ${new Date().toISOString()}
                  **Sync Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }
            }